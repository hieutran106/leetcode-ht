package hard._037_sudoku_solver;

import org.junit.Test;
import static org.assertj.core.api.Assertions.assertThat;

public class SudokuSolverTest {
    @Test
    public void testCase1() {
        char[][] input = new char[][] {
                // block 0
                {'5', '3', '.',     '.', '7', '.',  '.', '.', '.'},
                {'6', '.', '.',     '1', '9', '5',  '.', '.', '.'},
                {'.', '9', '8',     '.', '.', '.',  '.', '6', '.'},
                // block 1
                {'8', '.', '.',     '.', '6', '.',  '.', '.', '3'},
                {'4', '.', '.',     '8', '.', '3',  '.', '.', '1'},
                {'7', '.', '.',     '.', '2', '.',  '.', '.', '6'},
                //block 2
                {'.', '6', '.',     '.', '.', '.',  '2', '8', '.'},
                {'.', '.', '.',     '4', '1', '9',  '.', '.', '5'},
                {'.', '.', '.',     '.', '8', '.',  '.', '7', '9'},
        };
        var s = new Solution();
        s.solveSudoku(input);

        char[][] expect = new char[][] {
                // block 0
                {'5', '3', '4',     '6', '7', '8',  '9', '1', '2'},
                {'6', '7', '2',     '1', '9', '5',  '3', '4', '8'},
                {'1', '9', '8',     '3', '4', '2',  '5', '6', '7'},
                // block 1
                {'8', '5', '9',     '7', '6', '1',  '4', '2', '3'},
                {'4', '2', '6',     '8', '5', '3',  '7', '9', '1'},
                {'7', '1', '3',     '9', '2', '4',  '8', '5', '6'},
                //block 2
                {'9', '6', '1',     '5', '3', '7',  '2', '8', '4'},
                {'2', '8', '7',     '4', '1', '9',  '6', '3', '5'},
                {'3', '4', '5',     '2', '8', '6',  '1', '7', '9'},
        };
        assertThat(input).isEqualTo(expect);
    }

    @Test
    public void testCase2() {
        char[][] input = new char[][] {
                // block 0
                {'.', '7', '.',     '.', '2', '.',  '9', '.', '.'},
                {'.', '4', '.',     '8', '.', '6',  '.', '.', '.'},
                {'.', '1', '2',     '.', '.', '.',  '3', '.', '.'},
                // block 1
                {'.', '.', '.',     '.', '.', '.',  '8', '7', '.'},
                {'.', '6', '.',     '9', '7', '2',  '.', '5', '.'},
                {'.', '2', '5',     '.', '.', '.',  '.', '.', '.'},
                //block 2
                {'.', '.', '1',     '.', '.', '.',  '2', '9', '.'},
                {'.', '.', '.',     '5', '.', '4',  '.', '3', '.'},
                {'.', '.', '7',     '.', '6', '.',  '.', '1', '.'},
        };
        var s = new Solution();
        s.solveSudoku(input);

        char[][] expect = new char[][] {
                // block 0
                {'8', '7', '6',     '1', '2', '3',  '9', '4', '5'},
                {'5', '4', '3',     '8', '9', '6',  '7', '2', '1'},
                {'9', '1', '2',     '7', '4', '5',  '3', '8', '6'},
                // block 1
                {'3', '9', '4',     '6', '5', '1',  '8', '7', '2'},
                {'1', '6', '8',     '9', '7', '2',  '4', '5', '3'},
                {'7', '2', '5',     '4', '3', '8',  '1', '6', '9'},
                //block 2
                {'6', '5', '1',     '3', '8', '7',  '2', '9', '4'},
                {'2', '8', '9',     '5', '1', '4',  '6', '3', '7'},
                {'4', '3', '7',     '2', '6', '9',  '5', '1', '8'},
        };
        assertThat(input).isEqualTo(expect);
    }
}
